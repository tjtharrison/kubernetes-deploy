# Ansible playbook to install the required packages on the master and worker nodes
- hosts: "master, worker"
  become: yes # Run as root

  tasks:
    - name: Configure containerd
      shell: |
        sudo tee /etc/modules-load.d/containerd.conf <<EOF
        overlay
        br_netfilter
        EOF
        sudo modprobe overlay
        sudo modprobe br_netfilter
    - name: Configure kernel
      shell: |
        sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        EOF
    - name: Apply changes
      shell: sudo sysctl --system
    - name: Install containerd dependencies
      apt:
        name: [ 'apt-transport-https','ca-certificates','curl','gnupg-agent','software-properties-common' ]
        state: present
        update_cache: yes
    - name: Add containerd gpg key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: Add containerd software repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable
        state: present
        filename: docker.list
        update_cache: yes
    - name: Install containerd
      apt:
        name: [ 'containerd.io' ]
        state: present
        update_cache: yes
    - name: Configure containerd
      shell: |
        sudo mkdir -p /etc/containerd
        sudo containerd config default | sudo tee /etc/containerd/config.toml
        sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
    - name: Disable swap
      shell: swapoff -a
    - name: Stop swap from mounting
      shell: sed -i 's/^\/swap/#\/swap/g' /etc/fstab
    - name: Install dependencies
      apt:
        name: [ 'apt-transport-https','ca-certificates','curl','gnupg-agent','software-properties-common' ]
        state: present
        update_cache: yes
    - name: Add Kubernetes gpg key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
    - name: Add Kubernetes software repository
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list
        update_cache: yes
    - name: Install kubernetes
      apt:
        name: [ 'kubelet','kubeadm','kubectl' ]
        state: present
        update_cache: yes
    - name: Hold kubelet package at current version
      ansible.builtin.dpkg_selections:
        name: 'kubelet'
        selection: hold
    - name: Hold kubeadm package at current version
      ansible.builtin.dpkg_selections:
        name: 'kubeadm'
        selection: hold
    - name: Hold kubectl package at current version
      ansible.builtin.dpkg_selections:
        name: 'kubectl'
        selection: hold

# Ansible playbook to initialize the master node
- hosts: master
  become: yes # Run as root

  tasks:
    - name: Check if the master node is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init
    - name: Initialize the master node
      command: kubeadm init --pod-network-cidr=10.244.0.0/16
      when: kubeadm_init.stat.exists == false # Only run if the master node is not already initialized
    - name: Create .kube directory
      file:
        path: /home/k8sadmin/.kube
        state: directory
        owner: k8sadmin
        group: k8sadmin
        mode: 0755
    - name: Copy the kube config file
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/k8sadmin/.kube/config
        remote_src: yes
        owner: k8sadmin
        group: k8sadmin
        mode: 0644
    - name: Install calico CNI
      command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      become: yes
      become_user: k8sadmin
    - name: Get the token for joining the worker nodes
      become: yes
      become_user: k8sadmin
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command
    - name: Display registered output
      debug:
        var: kubernetes_join_command.stdout_lines
    - name: Create dummy host to store variable for node config
      add_host:
        name: "DUMMY_HOST"
        JOIN_COMMAND: "{{ kubernetes_join_command.stdout_lines[0] }}"

# Ansible playbook to join the worker nodes to the cluster
- hosts: worker
  become: yes # Run as root

  tasks:
    - name: Join the worker nodes to the cluster
      command: "{{ hostvars['DUMMY_HOST']['JOIN_COMMAND'] }}"
      become: yes